## Activating virtual environment:
sudo apt install python3-virtualenv
virtualenv venv
source venv/bin/activate

To set up Podman as a replacement for Docker using an alias, you can add the alias command to either your current shell session or, for a more permanent setup, to your shell configuration file (such as .bashrc, .zshrc, or .profile). 
This way, whenever you type docker, it will invoke Podman instead.
1: nano ~/.bashrc
-> Add the following line at the end of the file:
2: alias docker=podman
-> After updating the configuration file, youâ€™ll need to reload it to apply the changes. Run:
3: source ~/.bashrc
-> Test the alias by typing:
4: docker --version

## Azcli Install with one command:
curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

## Django application project:
https://www.civo.com/learn/build-deploy-restfulapi-fastapi-kubernetes

## ACR Access:
az acr login --name akstestxksregistry --expose-token
podman login testxksregistry.azurecr.io -u 00000000-0000-0000-0000-000000000000 -p <access_token>
Ex: 
DevAdmin@aksserver:~/drf_kubernetes$ az acr login -n akstestacr2024 --expose-token
You can perform manual login using the provided access token below, for example: 'docker login loginServer -u 00000000-0000-0000-0000-000000000000 -p accessToken'
{
  "accessToken": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IlBWRTc6SVM2RzpRUEVJOkpFRTc6TkgzVDpTNEhaOk5IRko6U1BTSzpWQks0OjRCSEI6V01DTjpSSUdXIn0.eyJqdGkiOiIzMjQzMGMyYS1mZGMwLTQxNWYtOGFhNi1lMzUyNDdjZTIwMTMiLCJzdWIiOiJsaXZlLmNvbSNrOHJkc2V0dXAyNEBvdXRsb29rLmNvbSIsIm5iZiI6MTczMjExMTAwNywiZXhwIjoxNzMyMTIyNzA3LCJpYXQiOjE3MzIxMTEwMDcsImlzcyI6IkF6dXJlIENvbnRhaW5lciBSZWdpc3RyeSIsImF1ZCI6ImFrc3Rlc3RhY3IyMDI0LmF6dXJlY3IuaW8iLCJ2ZXJzaW9uIjoiMS4wIiwicmlkIjoiNzQzZjRiM2E4N2Y1NGYyZDgyYjc1Y2NiNTQyOGRiNmMiLCJncmFudF90eXBlIjoicmVmcmVzaF90b2tlbiIsImFwcGlkIjoiMDRiMDc3OTUtOGRkYi00NjFhLWJiZWUtMDJmOWUxYmY3YjQ2IiwidGVuYW50IjoiMmVjMTIxOWYtMGIzNi00ZjA2LTk4ODgtZjRiOWRmZGNkNDM1IiwicGVybWlzc2lvbnMiOnsiYWN0aW9ucyI6WyJyZWFkIiwid3JpdGUiLCJkZWxldGUiLCJtZXRhZGF0YS9yZWFkIiwibWV0YWRhdGEvd3JpdGUiLCJkZWxldGVkL3JlYWQiLCJkZWxldGVkL3Jlc3RvcmUvYWN0aW9uIl19LCJyb2xlcyI6W119.SMIC5UluVdLEsYLK9NynYGtGWesScRtFm8A8Il-4VAQAga-42pRphD37cXCE0fsrv60dMtIcULLI0vtvlfYqn4_j_ibG2mSntoVxbLB6Y7FLMwQxgH_Lg06HOl7kMvioHyE1L75dqmArcDwYxKkPKTBWLvH2oNfdhUl4aI9lAW5woAURdubpVfvma8Z9lJhLFY9EZtpmWaR7Cqu2YmnjQSE6ncd2MWtnF4HJqeZK_I_MfRnfIFAwfnoYmGJjNhNrkUCqG0erVr1H6LjHZ0Ken-DGYYfBRqU8GeYfQY4qXpNtlOkX487e3MO3T-4NstVQ00AkFUWpADZSfPPVJpdYOg",
  "loginServer": "akstestacr2024.azurecr.io"
}

## Docker image tagging:
podman tag localhost/sample-django-app:0.0.1 testxksregistry.azurecr.io/sample-django-app:0.0.1
podman push testxksregistry.azurecr.io/sample-django-app:0.0.1


## aks access:
az aks list -o table
az get-credentails --resource-group <rg-group> --name <cluster-name> 

## Grafana Installation: on Linux server manuall 
sudo apt-get install -y apt-transport-https software-properties-common wget
sudo mkdir -p /etc/apt/keyrings/
wget -q -O - https://apt.grafana.com/gpg.key | gpg --dearmor | sudo tee /etc/apt/keyrings/grafana.gpg > /dev/null
echo "deb [signed-by=/etc/apt/keyrings/grafana.gpg] https://apt.grafana.com stable main" | sudo tee -a /etc/apt/sources.list.d/grafana.list
sudo apt-get update
sudo apt-get install grafana

## K8 deploment for grafana 

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: grafana
  name: grafana
spec:
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      securityContext:
        fsGroup: 472
        supplementalGroups:
          - 0
      containers:
        - name: grafana
          image: grafana/grafana:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3000
              name: http-grafana
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /robots.txt
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 2
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 3000
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 250m
              memory: 750Mi
          volumeMounts:
            - mountPath: /var/lib/grafana
              name: grafana-pv
      volumes:
        - name: grafana-pv
          persistentVolumeClaim:
            claimName: grafana-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
spec:
  ports:
    - port: 3000
      protocol: TCP
      targetPort: http-grafana
  selector:
    app: grafana
  sessionAffinity: None
  type: LoadBalancer

